From 6d15a2e4f0acd79bf2db3f56ee02e0794898704e Mon Sep 17 00:00:00 2001
From: Josh Kirsch <jkirsch@codeaurora.org>
Date: Sat, 14 Jan 2017 15:17:36 +0100
Subject: [PATCH] drivers: soc: Add buffer overflow check for svc send request

Add buffer overflow check in voice_svc_send_req.

CRs-fixed: 1010081
Change-Id: I4ae703334b0cf04f327b392bc9cd6febd4ad32f2
Signed-off-by: Josh Kirsch <jkirsch@codeaurora.org>
mh0rst: Backported and adjusted payload length check for
SNDRV_VOICE_SVC_CMD_REQUEST case in voice_svc_ioctl.
---

diff --git a/arch/arm/mach-msm/qdsp6v2/voice_svc.c b/arch/arm/mach-msm/qdsp6v2/voice_svc.c
index 9ea6a4c..2337d6e 100755
--- a/arch/arm/mach-msm/qdsp6v2/voice_svc.c
+++ b/arch/arm/mach-msm/qdsp6v2/voice_svc.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2014, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2014-2016, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -165,7 +165,8 @@
 	int ret = 0;
 	void *apr_handle = NULL;
 	struct apr_data *aprdata = NULL;
-	uint32_t user_payload_size = 0;
+	uint32_t user_payload_size;
+	uint32_t payload_size;
 
 	if (apr_request == NULL) {
 		pr_err("%s: apr_request is NULL\n", __func__);
@@ -175,16 +176,22 @@
 	}
 
 	user_payload_size = apr_request->payload_size;
+	payload_size = sizeof(struct apr_data) + user_payload_size;
 
-	aprdata = kmalloc(sizeof(struct apr_data) + user_payload_size,
-			  GFP_KERNEL);
-
-	if (aprdata == NULL) {
-		pr_err("%s: aprdata kmalloc failed.", __func__);
-
-		ret = -ENOMEM;
+	if (payload_size <= user_payload_size) {
+		pr_err("%s: invalid payload size ( 0x%x ).\n",
+			__func__, user_payload_size);
+		ret = -EINVAL;
 		goto done;
-	}
+	} else {
+		aprdata = kmalloc(payload_size, GFP_KERNEL);
+		if (aprdata == NULL) {
+			pr_err("%s: aprdata kmalloc failed.", __func__);
+
+			ret = -ENOMEM;
+			goto done;
+		}
+ 	}
 
 	voice_svc_update_hdr(apr_request, aprdata, prtd);
 
@@ -326,6 +333,7 @@
 	struct apr_response_list *resp;
 	void __user *arg = (void __user *)u_arg;
 	uint32_t user_payload_size = 0;
+	uint32_t payload_size;
 	unsigned long spin_flags;
 
 	pr_debug("%s: cmd: %u\n", __func__, cmd);
@@ -357,15 +365,23 @@
 
 		user_payload_size =
 			((struct voice_svc_cmd_request*)arg)->payload_size;
+		payload_size =
+			sizeof(struct voice_svc_cmd_request) + user_payload_size;
 
-		apr_request = kmalloc(sizeof(struct voice_svc_cmd_request) +
-				      user_payload_size, GFP_KERNEL);
+		if (payload_size <= user_payload_size) {
+			pr_err("%s: invalid payload size ( 0x%x ).\n",
+				__func__, user_payload_size);
+			ret = -EINVAL;
+ 			goto done;
+		} else {
+			apr_request = kmalloc(payload_size, GFP_KERNEL);
 
-		if (apr_request == NULL) {
-			pr_err("%s: apr_request kmalloc failed.", __func__);
+			if (apr_request == NULL) {
+				pr_err("%s: apr_request kmalloc failed.", __func__);
 
-			ret = -ENOMEM;
-			goto done;
+				ret = -ENOMEM;
+				goto done;
+			}
 		}
 
 		if (copy_from_user(apr_request, arg,
